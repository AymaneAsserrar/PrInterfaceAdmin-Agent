stages:
  - test
  - lint
  - coverage
  - build_and_deploy


default:
  image: devops.telecomste.fr:5050/printerfaceadmin/2024-25/group8/ia-groupe-8:tooling


lint:
  stage: lint
  script:
    - pylint src/ --fail-under=7.6 > pylint-report.txt
    - |
      score=$(grep "Your code has been rated at" pylint-report.txt | sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p')
      echo "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"96\" height=\"20\" role=\"img\" aria-label=\"Pylint: ${score}\"><title>Pylint: ${score}</title><linearGradient id=\"s\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><clipPath id=\"r\"><rect width=\"96\" height=\"20\" rx=\"3\" fill=\"#fff\"/></clipPath><g clip-path=\"url(#r)\"><rect width=\"61\" height=\"20\" fill=\"#555\"/><rect x=\"61\" width=\"35\" height=\"20\" fill=\"#4c1\"/><rect width=\"96\" height=\"20\" fill=\"url(#s)\"/></g><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"Verdana,Geneva,DejaVu Sans,sans-serif\" text-rendering=\"geometricPrecision\" font-size=\"110\"><text aria-hidden=\"true\" x=\"315\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"510\">Pylint</text><text x=\"315\" y=\"140\" transform=\"scale(.1)\" fill=\"#fff\" textLength=\"510\">Pylint</text><text aria-hidden=\"true\" x=\"775\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"250\">${score}</text><text x=\"775\" y=\"140\" transform=\"scale(.1)\" fill=\"#fff\" textLength=\"250\">${score}</text></g></svg>" > pylint-score.svg
  artifacts:
    paths:
      - pylint-report.txt
      - pylint-score.svg
  allow_failure: false
 
 

test:
  stage: test
  script:
    - echo "Starting test..."
    - pip install -r requirements.txt
    - apk add --no-cache make
    - make environment
    - make test 


coverage:
  stage: coverage
  script:
   - pip install -r requirements.txt
   - pytest --cov=src --cov-report=xml --cov-report=term-missing --cov-config=.coveragerc --cov-fail-under=70
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  artifacts:
    
    paths:
      - coverage.xml




variables:
  CI_REGISTRY_IMAGE: devops.telecomste.fr:5050/printerfaceadmin/2024-25/group8/ia-groupe-8
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_USER: TokenDockerAgent 
  CI_REGISTRY_PASSWORD: glpat-RKs7JCFTd8Tr8KsHPcxf

services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]



build_and_deploy:
  stage: build_and_deploy
  image: docker:19.03.12
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - DATEPRECISE=$(date +"%Y%m%d-%H%M%S")
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest" .
    - docker tag "$CI_REGISTRY_IMAGE:latest" "$CI_REGISTRY_IMAGE:$DATEPRECISE"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$DATEPRECISE"
    - docker pull "$CI_REGISTRY_IMAGE:latest"
  only:
    - main
 